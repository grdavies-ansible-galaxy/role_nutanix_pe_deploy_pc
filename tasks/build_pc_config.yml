---
- name: Get container UUID
  block:
    - name: Set nutanix_container_found_uuid=None
      ansible.builtin.set_fact:
        nutanix_container_found_uuid: "None"

    - name: Search for UUID for container "{{ nutanix_pc_deploy_container_name }}"
      ansible.builtin.import_role:
        name: grdavies.role_nutanix_pe_container_search
      vars:
        nutanix_container_search_name: "{{ nutanix_pc_deploy_container_name }}"

    - name: Container not found
      ansible.builtin.fail:
        msg:
          "the container '{{ nutanix_pc_deploy_container_name }}' was not found. Please check the input \
          variable nutanix_pc_deploy_container_name or that the container is present on this Nutanix cluster"
      when:
        - nutanix_container_found_uuid is not defined or nutanix_container_found_uuid == "None"

- name: Find uuid for network "{{ nutanix_pc_deploy_subnet_name }}"
  block:
    - name: Get subnets from nutanix.ncp collection
      nutanix.ncp.ntnx_subnets_info:
        nutanix_host: "{{ nutanix_host }}"
        nutanix_username: "{{ nutanix_username }}"
        nutanix_password: "{{ nutanix_password }}"
        validate_certs: "{{ validate_certs }}"
      register: nutanix_current_subnets

    - name: Search subnets list for subnet name and return its uuid
      ansible.builtin.set_fact:
        nutanix_pc_deploy_network_uuid: "{{ item.metadata.uuid }}"
      when: item.status.name == nutanix_pc_deploy_subnet_name
      with_items: "{{ nutanix_current_subnets.response.entities }}"

- name: Build VM list from legacy role variables (nutanix_pc_deploy_vm_name & nutanix_pc_deploy_ip_address)
  ansible.builtin.set_fact:
    nutanix_pc_deploy_vm_list:
      - name: "{{ nutanix_pc_deploy_vm_name }}"
        ip_addr: "{{ nutanix_pc_deploy_ip_address }}"
  when:
    - nutanix_pc_deploy_vm_list is undefined
    - nutanix_pc_deploy_vm_name is defined
    - nutanix_pc_deploy_ip_address is defined

- name: PCVM list not the correct length
  ansible.builtin.fail:
    msg: "Either provide 1 or 3 pcvm name & ip addresses"
  when:
    - nutanix_pc_deploy_vm_list | length not in [1,3]

- name: PCVM VIP required for scale-out deployment
  ansible.builtin.fail:
    msg: "Provide a value for 'nutanix_pc_vip' as this is a scale-out Prism Central deployment"
  when:
    - nutanix_pc_vip is undefined
    - nutanix_pc_deploy_vm_list | length > 1

- name: Debug
  when:
    - nutanix_debug
  block:
    - name: Debug nutanix_current_subnets.response
      ansible.builtin.debug:
        var: nutanix_current_subnets.response

    - name: Debug nutanix_pc_deploy_network_uuid
      ansible.builtin.debug:
        var: nutanix_pc_deploy_network_uuid

    - name: Debug nutanix_pc_deploy_vm_list
      ansible.builtin.debug:
        var: nutanix_pc_deploy_vm_list

- name: Subnet not found
  ansible.builtin.fail:
    msg:
      "the subnet '{{ nutanix_pc_deploy_subnet_name }}' was not found. Please check the input variable nutanix_pc_deploy_subnet_name or that \
      the subnet is present on this Nutanix cluster"
  when:
    - nutanix_pc_deploy_network_uuid is not defined

- name: Get available PC versions
  ansible.builtin.uri:
    url: "https://{{ nutanix_host }}:{{ nutanix_port }}/PrismGateway/services/rest/v1/upgrade/prism_central_deploy/softwares"
    method: GET
    validate_certs: "{{ validate_certs }}"
    body_format: json
    headers:
      Authorization: "{{ nutanix_api_auth }}"
    status_code: 200
    return_content: true
  register: nutanix_pc_deploy_versions
  ignore_errors: false

- name: Debug nutanix_pc_deploy_versions
  ansible.builtin.debug:
    msg: "{{ nutanix_pc_deploy_versions }}"
  when: nutanix_debug

- name: Get latest PC for this clusters AOS release
  ansible.builtin.set_fact:
    nutanix_pc_deploy_rdates: "{{ nutanix_pc_deploy_versions.json | json_query('entities[*].releaseDate') | max }}"

- name: Debug nutanix_pc_deploy_rdates
  ansible.builtin.debug:
    var: nutanix_pc_deploy_rdates
  when: nutanix_debug

- name: Get latest PC version name for this clusters AOS release
  ansible.builtin.set_fact:
    nutanix_pc_deploy_version: '{{ nutanix_pc_deploy_versions.json | json_query(query) | join("") }}'
  vars:
    query: "entities[?releaseDate==`{{ nutanix_pc_deploy_rdates }}`].version"
  when: nutanix_pc_deploy_version is not defined

- name: Debug nutanix_pc_deploy_version
  ansible.builtin.debug:
    msg: "{{ nutanix_pc_deploy_version }}"
  when: nutanix_debug

- name: Get latest PC version data for "{{ nutanix_pc_deploy_version }}"
  ansible.builtin.set_fact:
    nutanix_pc_deploy_version_data: '{{ nutanix_pc_deploy_versions.json | json_query(query) | join("") }}'
  vars:
    query: "entities[?name==`{{ nutanix_pc_deploy_version }}`]"

- name: Specified PC version not available.
  ansible.builtin.fail:
    msg:
      "The Prism Central release specified '{{ nutanix_pc_deploy_version }}' cannot be found.
      Please ensure that this release is enabled for 1-click deployment or has been manually uploaded to the cluster."
  when: not nutanix_pc_deploy_version_data

- name: Debug nutanix_pc_deploy_versions
  ansible.builtin.debug:
    msg: "{{ nutanix_pc_deploy_version_data }}"
  when: nutanix_debug

- name: Get PC deployment size from release metadata
  ansible.builtin.set_fact:
    nutanix_pc_deploy_num_sockets: "{{ nutanix_pc_deploy_version_data.prismCentralSizes | json_query(query) | first | json_query('vcpus') }}"
    nutanix_pc_deploy_data_disk_size: "{{ nutanix_pc_deploy_version_data.prismCentralSizes | json_query(query) | first | json_query('diskSizeInGib') }} GiB"
    nutanix_pc_deploy_memory_size: "{{ nutanix_pc_deploy_version_data.prismCentralSizes | json_query(query) | first | json_query('memorySizeInGib') }} GiB"
  vars:
    query: "[?pcVmFormFactor==`{{ nutanix_pc_deploy_size }}`]"

- name: Get PC deployment size from defaults
  ansible.builtin.set_fact:
    nutanix_pc_default_num_sockets: "{{ nutanix_central_size_defaults | json_query(query) | first | json_query('vcpus') }}"
    nutanix_pc_default_data_disk_size: "{{ nutanix_central_size_defaults | json_query(query) | first | json_query('diskSizeInGib') }}"
    nutanix_pc_default_memory_size: "{{ nutanix_central_size_defaults | json_query(query) | first | json_query('memorySizeInGib') }}"
  vars:
    query: "[?size==`{{ nutanix_pc_deploy_size }}`]"

- name: Set PC deployment size
  ansible.builtin.set_fact:
    nutanix_pc_num_sockets: "{{ nutanix_pc_deploy_num_sockets | default(nutanix_pc_default_num_sockets) }}"
    nutanix_pc_data_disk_size: "{{ nutanix_pc_deploy_data_disk_size | default(nutanix_pc_default_data_disk_size) }}"
    nutanix_pc_memory_size: "{{ nutanix_pc_deploy_memory_size | default(nutanix_pc_default_memory_size) }}"

- name: Debug nutanix_pc_deploy_num_sockets
  ansible.builtin.debug:
    var: nutanix_pc_deploy_num_sockets
  when: nutanix_debug

- name: Debug nutanix_pc_default_num_sockets
  ansible.builtin.debug:
    var: nutanix_pc_default_num_sockets
  when: nutanix_debug

- name: Debug nutanix_pc_num_sockets
  ansible.builtin.debug:
    var: nutanix_pc_num_sockets
  when: nutanix_debug

- name: Debug nutanix_pc_deploy_data_disk_size
  ansible.builtin.debug:
    var: nutanix_pc_deploy_data_disk_size
  when: nutanix_debug

- name: Debug nutanix_pc_default_data_disk_size
  ansible.builtin.debug:
    var: nutanix_pc_default_data_disk_size
  when: nutanix_debug

- name: Debug nutanix_pc_data_disk_size
  ansible.builtin.debug:
    var: nutanix_pc_data_disk_size
  when: nutanix_debug

- name: Debug nutanix_pc_deploy_memory_size
  ansible.builtin.debug:
    var: nutanix_pc_deploy_memory_size
  when: nutanix_debug

- name: Debug nutanix_pc_default_memory_size
  ansible.builtin.debug:
    var: nutanix_pc_default_memory_size
  when: nutanix_debug

- name: Debug nutanix_pc_memory_size
  ansible.builtin.debug:
    var: nutanix_pc_memory_size
  when: nutanix_debug
